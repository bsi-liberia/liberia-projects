"""empty message

Revision ID: d7f457367fcd
Revises: 249fc39ee89f
Create Date: 2019-03-28 19:51:16.879603

"""
from alembic import op
import sqlalchemy as sa
from projectdashboard.extensions import db
from projectdashboard import models
from sqlalchemy import func

# revision identifiers, used by Alembic.
revision = 'd7f457367fcd'
down_revision = '249fc39ee89f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    resolve_duplicates()
    with op.batch_alter_table("forwardspend") as batch_op:
        batch_op.create_unique_constraint("activity_id__period_start_date", ['activity_id', 'period_start_date'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("forwardspend") as batch_op:
        batch_op.drop_constraint("activity_id__period_start_date", type_='unique')
    # ### end Alembic commands ###

def resolve_duplicates():
    """
    Find duplicate forward spend entries, where:
        - the activity ID and period start date are the same
        - we limit to zero-valued forwardspends because these are the only ones with problems
    """
    duplicates = db.session.query(
            models.ActivityForwardSpend.activity_id,
            models.ActivityForwardSpend.period_start_date
        ).filter(
            models.ActivityForwardSpend.value==0 # Important: only find zero-valued forwardspends
        ).having(
            func.count(models.ActivityForwardSpend.id)>1
        ).group_by(
            models.ActivityForwardSpend.activity_id,
            models.ActivityForwardSpend.period_start_date
        ).all()

    """
    Go through each of the duplicates
    """
    for row in duplicates:
        dup_forward_spend = models.ActivityForwardSpend.query.filter(
            models.ActivityForwardSpend.activity_id==row.activity_id,
            models.ActivityForwardSpend.period_start_date==row.period_start_date
        ).first() # Only return one of the two duplicates!
        print ("Removing duplicate entry {}".format(dup_forward_spend.id))
        # Uncomment the below two line to actually delete
        db.session.delete(dup_forward_spend)
    db.session.commit()

    """
    Run again but also deal with duplicates where there are non-zero values
    """
    duplicates_others_zero = db.session.query(
            models.ActivityForwardSpend.activity_id,
            models.ActivityForwardSpend.period_start_date
        ).having(
            func.count(models.ActivityForwardSpend.id)>1
        ).group_by(
            models.ActivityForwardSpend.activity_id,
            models.ActivityForwardSpend.period_start_date
        ).all()

    for row in duplicates_others_zero:
        duplicate_entries = models.ActivityForwardSpend.query.filter_by(
            activity_id=row.activity_id,
            period_start_date=row.period_start_date
        ).all()
        if not len(duplicate_entries)>1:
            print ("SKIPPING")
            continue
        for entry in duplicate_entries:
            if entry.value==0:
                print("Removing duplicate entry {}".format(entry.id))
                db.session.delete(entry)
    db.session.commit()
